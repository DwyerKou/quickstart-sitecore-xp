AWSTemplateFormatVersion: 2010-09-09
Description: "This template deploys required IAM resources as well as entries into Secrets Manager for use in the Sitecore deployment"
Parameters:
  SitecoreS3Bucket:
    Type: String
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String
  LambdaZipsBucketName:
    Type: String

Resources:
  #Lambda IAM Policy
  ConvertCertificatesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Get-Certificate-S3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${SitecoreS3Bucket}/*"
        - PolicyName: Import-Delete-ACM
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:ImportCertificate
                  - acm:DeleteCertificate
                Resource: "*"
        - PolicyName: Get-Secret-Value
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:*:secret:*"
        - PolicyName: Put-Delete-SSM-Parameter
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/*"
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${LambdaZipsBucketName}/${QSS3KeyPrefix}*"
  #IAM Role AMI Instance
  SCAMIInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
              - Effect: "Allow"
                Action: s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}"
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ssm:StartAutomationExecution
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/*:VersionId}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/*SitecoreSsmAMIBuild*"
              - Effect: "Allow"
                Action: ssm:GetAutomationExecution
                Resource: "*"
        - PolicyName: CWAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:log-stream:*"
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                Resource: "*"
  SCAMIInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SCAMIInstanceRole
  #IAM Role for Instances
  SCInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      #ManagedPolicyArns:
      #  - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
              - Effect: "Allow"
                Action: s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}"
        - PolicyName: CWAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                Resource: "*"
  SCInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SCInstanceRole
  #Create IAM Role for SSM Automation
  SCAutomationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ssm.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      Policies:
        - PolicyName: EC2Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - ec2:RebootInstances
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - Effect: "Allow"
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                Resource: "*"
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["rds:DescribeDBInstances"]
                Resource: "*"
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["ssm:PutParameter", "ssm:GetParameter"]
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
Outputs:
  SCAMIInstanceRoleARN:
    Description: ARN for the Instance Role.
    Value: !GetAtt SCAMIInstanceRole.Arn
  SCAMIInstanceProfileARN:
    Description: ARN for the Instance Profile.
    Value: !GetAtt SCInstanceProfile.Arn
  SCAMIInstanceProfileName:
    Description: Name of the Instance Profile.
    Value: !Ref SCInstanceProfile
  SCInstanceRoleARN:
    Description: ARN for the Instance Role.
    Value: !GetAtt SCInstanceRole.Arn
  SCInstanceProfileARN:
    Description: ARN for the Instance Profile.
    Value: !GetAtt SCInstanceProfile.Arn
  SCInstanceProfileName:
    Description: Name of the Instance Profile.
    Value: !Ref SCInstanceProfile
  SCAutomationRoleARN:
    Description: ARN for the Instance Role.
    Value: !GetAtt SCAutomationRole.Arn
  ConvertCertificatesLambdaRoleArn:
    Description: The role ARN for the Lambda function to convert and upload certs to ACM.
    Value: !GetAtt ConvertCertificatesLambdaRole.Arn
  CopyZipsRoleArn:
    Description: The role ARN for the Lambda function to copy Zip's to local S3 bucket for Lambda Functions.
    Value: !GetAtt CopyZipsRole.Arn
