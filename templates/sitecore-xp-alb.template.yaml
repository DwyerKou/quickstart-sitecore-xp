AWSTemplateFormatVersion: 2010-09-09
Description: 'Deploys the Auto Scaling Groups, Target Groups, Listners and rules for the Load balancers. These launch the instances for the Sitecore roles'
Parameters:
  PrivateSubnet1A:
    Type: String
  PrivateSubnet2A:
    Type: String
  VPCID:
    Type: String
  LoadBalancerInternal:
    Type: String
  LoadBalancerExternal:
    Type: String
  XConnectNLB:
    Type: String
  InternalCertificateARN:
    Type: String
  ExternalCertificateARN:
    Type: String
  CDMinSize:
    Type: String
  CDMaxSize:
    Type: String
  CDDesiredCapacity:
    Type: String
  CDInstanceType:
    Type: String
  CDScalingMetric:
    Type: String
    Default: ASGAverageCPUUtilization
    AllowedValues:
      - ASGAverageCPUUtilization
      - ASGAverageNetworkIn
      - ALBRequestCountPerTarget
  CDScalingMetricValue:
    Type: String
    Default: 5
  CMInstanceType:
    Type: String
  CMMinSize:
    Type: Number
  CMMaxSize:
    Type: Number
  CMDesiredCapacity:
    Type: Number
  CMScalingMetric:
    Type: String
    Default: ASGAverageCPUUtilization
    AllowedValues:
      - ASGAverageCPUUtilization
      - ASGAverageNetworkIn
      - ALBRequestCountPerTarget
  CMScalingMetricValue:
    Type: String
    Default: 5
  SitecoreInstanceSG:
    Type: AWS::EC2::SecurityGroup::Id
  SCInstanceProfile:
    Type: String
  SitecoreKeyPair:
    Type: String
  IntDNS:
    Type: String
  AutoscalingSNS:
    Type: String
  LocalQSScripts:
    Type: String
  SCQSPrefix:
    Type: String

Resources:
  #--- Internal ALB Config ---#
  HTTPSListenerInternal:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref InternalCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RepIntTargetGroup
      LoadBalancerArn: !Ref LoadBalancerInternal
      Port: 443
      Protocol: HTTPS
  #Internal Target Groups
  # CDIntTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckPort: '80'
  #     HealthCheckProtocol: HTTP
  #     Name: Int-Content-Delivery
  #     Port: 443
  #     Protocol: HTTPS
  #     TargetType: instance
  #     VpcId: !Ref VPCID
  # CMIntTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckPort: '80'
  #     HealthCheckProtocol: HTTP
  #     Name: Int-Content-Management
  #     Port: 443
  #     Protocol: HTTPS
  #     TargetType: instance
  #     VpcId: !Ref VPCID
  ColIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-Collection
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  CSIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: TCP
      Name: Int-CollectionSearch
      Port: 443
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPCID
  CPIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-CortexProcessing
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  CRIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-CortexReporting
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  # ISIntTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckPort: '80'
  #     HealthCheckProtocol: HTTP
  #     Name: Int-IdentityServer
  #     Port: 443
  #     Protocol: HTTPS
  #     TargetType: instance
  #     VpcId: !Ref VPCID
  MAIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-MarketingAutomation
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  MARIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-MarketingAutomationReporting
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  PrcIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-PRC
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  RDIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-ReferenceData
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  RepIntTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Int-REP
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID

  XConnectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CSIntTargetGroup
      LoadBalancerArn: !Ref XConnectNLB
      Port: 443
      Protocol: TCP
  # HTTPSListenerInternalRule1:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref CMIntTargetGroup
  #     Conditions:
  #       - Field: host-header
  #         Values:
  #           - !Sub contentmgmt.${AWS::Region}.sitecore.internal
  #     ListenerArn: !Ref HTTPSListenerInternal
  #     Priority: 1
  # HTTPSListenerInternalRule2:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ISIntTargetGroup
  #     Conditions:
  #       - Field: host-header
  #         Values:
  #           - !Sub identity.${AWS::Region}.sitecore.internal
  #     ListenerArn: !Ref HTTPSListenerInternal
  #     Priority: 2
  HTTPSListenerInternalRule3:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RDIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub refdata.${AWS::Region}.sitecore.internal
            - !Sub refdata.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 3
  HTTPSListenerInternalRule4:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MAIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub mktauto.${AWS::Region}.sitecore.internal
            - !Sub mktauto.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 4
  HTTPSListenerInternalRule5:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MARIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub mktautorep.${AWS::Region}.sitecore.internal
            - !Sub mktautorep.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 5
  HTTPSListenerInternalRule6:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CPIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub cortexproc.${AWS::Region}.sitecore.internal
            - !Sub cortexproc.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 6
  HTTPSListenerInternalRule7:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CRIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub cortexrep.${AWS::Region}.sitecore.internal
            - !Sub cortexrep.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 7
  HTTPSListenerInternalRule8:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PrcIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub proc.${AWS::Region}.sitecore.internal
            - !Sub proc.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 8
  HTTPSListenerInternalRule9:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RepIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub rep.${AWS::Region}.sitecore.internal
            - !Sub rep.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 9
  HTTPSListenerInternalRule10:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ColIntTargetGroup
      Conditions:
        - Field: host-header
          Values:
            # - !Sub coll.${AWS::Region}.sitecore.internal
            - !Sub coll.${IntDNS}
      ListenerArn: !Ref HTTPSListenerInternal
      Priority: 10
  # HTTPSListenerInternalRule11:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref CSIntTargetGroup
  #     Conditions:
  #       - Field: host-header
  #         Values:
  #           # - !Sub collsearch.${AWS::Region}.sitecore.internal
  #           - !Sub collsearch.${IntDNS}
  #     ListenerArn: !Ref HTTPSListenerInternal
  #     Priority: 11
  #--- External ALB Config ---#
  HTTPSListenerExternal:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ExternalCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CDExtTargetGroup
      LoadBalancerArn: !Ref LoadBalancerExternal
      Port: 443
      Protocol: HTTPS
  HTTPListenerExternal:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CDExtTargetGroup
      LoadBalancerArn: !Ref LoadBalancerExternal
      Port: 80
      Protocol: HTTP
  HTTPSListenerExternalRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CMExtTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub '{{resolve:ssm:/${SCQSPrefix}/service/cmdns:1}}'
      ListenerArn: !Ref HTTPSListenerExternal
      Priority: 1
  HTTPSListenerExternalRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ISExtTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub '{{resolve:ssm:/${SCQSPrefix}/service/isdns:1}}'
      ListenerArn: !Ref HTTPSListenerExternal
      Priority: 2
  #External Target Groups
  CDExtTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Ext-Content-Delivery
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPCID
  CMExtTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Ext-Content-Management
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  ISExtTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      Name: Ext-Identity-Server
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VPCID
  #Create Auto Scaling Groups & Launch Configurations
  ContentDeliveryASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: !Ref CDDesiredCapacity
    Properties:
      LaunchConfigurationName: !Ref ContentDeliveryLC
      MaxSize: !Ref CDMinSize
      MinSize: !Ref CDMaxSize
      DesiredCapacity: !Ref CDDesiredCapacity
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref CDExtTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ContentDelivery-${SCQSPrefix}
          PropagateAtLaunch: true
  ContentDeliveryLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "CD" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "CD" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-update-web-config.ps1 -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "CD" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  CDScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ContentDeliveryASG
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 300
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: !Ref CDScalingMetric
        TargetValue: !Ref CDScalingMetricValue
  ContentManagementASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: !Ref CMDesiredCapacity
    Properties:
      LaunchConfigurationName: !Ref ContentManagementLC
      MaxSize: !Ref CMMaxSize
      MinSize: !Ref CMMinSize
      DesiredCapacity: !Ref CMDesiredCapacity
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref CMExtTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ContentManagement-${SCQSPrefix}
          PropagateAtLaunch: true
  ContentManagementLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CMInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "CM" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "CM" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "CM" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  CMScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ContentManagementASG
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 300
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: !Ref CMScalingMetric
        TargetValue: !Ref CMScalingMetricValue
  CollectionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref CollectionLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref ColIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub Collection-${SCQSPrefix}
          PropagateAtLaunch: true
  CollectionLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "Collection" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "Collection" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "Collection" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  CollectionSearchASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref CollectionSearchLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref CSIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub CollectionSearch-${SCQSPrefix}
          PropagateAtLaunch: true
  CollectionSearchLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "CollectionSearch" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "CollectionSearch" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "CollectionSearch" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  CortexProcessingASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref CortexProcessingLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref CPIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub CortexProcessing-${SCQSPrefix}
          PropagateAtLaunch: true
  CortexProcessingLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "CortexProcessing" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "CortexProcessing" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "CortexProcessing" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  CortexReportingASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref CortexReportingLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref CRIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub CortexReporting-${SCQSPrefix}
          PropagateAtLaunch: true
  CortexReportingLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "CortexReporting" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "CortexReporting" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "CortexReporting" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  IdentityASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref IdentityLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        # - !Ref ISIntTargetGroup
        - !Ref ISExtTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub Identity-${SCQSPrefix}
          PropagateAtLaunch: true
  IdentityLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "IdentityServer" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "IdentityServer" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "IdentityServer" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  MarketingAutomationASG:
    DependsOn: CollectionSearchASG # Marketing Automation requires that Collection Search be running or the services will not start, and the template will fail
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref MarketingAutomationLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref MAIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub MarketingAutomation-${SCQSPrefix}
          PropagateAtLaunch: true
  MarketingAutomationLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "MarketingAutomation" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "MarketingAutomation" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "MarketingAutomation" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  MarketingAutoRepASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref MarketingAutoRepLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref MARIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub MarketingAutomationReporting-${SCQSPrefix}
          PropagateAtLaunch: true
  MarketingAutoRepLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "MarketingAutomationReporting" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "MarketingAutomationReporting" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "MarketingAutomationReporting" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  ProcessingASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref ProcessingLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref PrcIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub Processing-${SCQSPrefix}
          PropagateAtLaunch: true
  ProcessingLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "Prc" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "Prc" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "Prc" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  ReferenceDataASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref ReferenceDataLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref RDIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ReferenceData-${SCQSPrefix}
          PropagateAtLaunch: true
  ReferenceDataLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "ReferenceData" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "ReferenceData" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "ReferenceData" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
  ReportingASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # Wait for the instance to signal that it is created
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      LaunchConfigurationName: !Ref ReportingLC
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      TargetGroupARNs:
        - !Ref RepIntTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AutoscalingSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub Reporting-${SCQSPrefix}
          PropagateAtLaunch: true
  ReportingLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Sub '{{resolve:ssm:/${SCQSPrefix}/instance/ami/customid:1}}'
      InstanceType: !Ref CDInstanceType
      SecurityGroups:
        - !Ref SitecoreInstanceSG
      IamInstanceProfile: !Ref SCInstanceProfile
      KeyName: !Ref SitecoreKeyPair
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - !Sub '${LocalQSScripts}\sc-role-prep.ps1 -Role "Rep" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-install-resources.ps1 -Role "Rep" -SCQSPrefix '
            - !Sub '"${SCQSPrefix}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - !Sub '${LocalQSScripts}\sc-cfn-signaling.ps1 -Role "Rep" -StackName '
            - !Sub '"${AWS::StackName}" -Region '
            - !Sub '"${AWS::Region}"'
            - "\n"
            - "</powershell>\n"
